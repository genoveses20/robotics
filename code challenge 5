int lmotor= 0; //left motor
int rmotor= 2; //right motor
int rbump= 9; //right bump
int lbump= 8; //left bump
int lsensor= 5; //left reflectance sensor
int rsensor=6; //right reflectance sensor
int ranger= 2; //right range
int speed= 50; //regular speed
int ispeed= -50; //inverse of regular speed, useful for turning
int vspeed= 100; //veer speed
int speedy= 20; //regular speed when veering
int pause= 450; //pause
int pause_more= 850; // slightly longer pause
int pause_most= 1500; //much longer pause
int zero= 0;// zero for no wall
int one= 1;// one for wall
int line= 200;// valuse of the line
int line2= 850; //line value up top
int wall= 200; //wall value
int midrange=1; //mid range
int counter= 0;

// Function Definitions // 
void straight(){
    printf("going straight\n");
    motor(lmotor,speed);
    motor(rmotor,speed);
}
void reversal(){
    printf("spin move\n");
    motor(lmotor,ispeed); //inverse speed used to help spin counter-clockwise
    motor(rmotor,speed);
    msleep(pause_more);
}

void rveer(){//the robot will veer to the right
    printf("commencing veer right\n");
    motor(rmotor,speedy);
    motor(lmotor,vspeed);
    }
void lveer(){//the robot will veer to the right
    printf("commencing veer left\n");
    motor(rmotor,vspeed);
    motor(lmotor,speedy);
    }
void walling(){  
        while(digital(lbump)==zero){
          straight();//move both forward
        if(analog(ranger) >wall){
            rveer(); // If it gets too close to the side, veers
        }
        if(analog(ranger) <wall){
            lveer(); // If it gets to far it veers
          }
        if(analog(midrange)<=wall){
            reversal();
        }
          if(analog(rsensor)>line){
            counter++;
           printf("counting line\n"); 
            msleep(pause);
        }
        if (counter==5){
            straight();
            msleep(pause);
            break;
        }

        }
}




int main(){
    walling();
    ao();


printf("Hello, World!\n");

return 0;

}


